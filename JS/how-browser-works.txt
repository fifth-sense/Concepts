When you enter a valid URL in a web browser's address bar and press Enter, a series of actions occur under the hood to
 load and display the requested web page.
 This process involves multiple components, including the browser engine, networking stack, 
 rendering engine, and JavaScript engine. Here's a deep dive into what happens when you enter a URL:

1. **User Input**: The user types a URL into the browser's address bar and presses Enter.

2. **Parsing the URL**: The browser parses the URL to break it down into several components:
   - **Scheme**: The protocol to be used (e.g., "http," "https").
   - **Host**: The domain name or IP address of the server.
   - **Port**: The port number to connect to (default HTTP port is 80, HTTPS is 443).
   - **Path**: The path to the resource on the server.
   - **Query**: Any query parameters included in the URL.
   - **Fragment**: An optional fragment identifier (often used for in-page links).

3. **DNS Resolution**: The browser checks its local DNS cache to resolve the domain name (host) to an IP address. 
If the IP address is not found in the cache, it sends a DNS request to a DNS server to resolve the domain.

4. **Establishing a TCP Connection**: The browser establishes a TCP connection to the server's IP address, usually on port 80 (HTTP) or 443 (HTTPS).

5. **HTTP Request**: The browser sends an HTTP request to the server, specifying the requested resource (based on the path from the URL). The request headers also include information about the browser, the user agent, and supported encodings.

6. **Server Processing**: The web server processes the HTTP request. This may involve retrieving data from a database, applying business logic, and preparing a response.

7. **HTTP Response**: The server sends an HTTP response back to the browser. The response contains:
   - **Status Code**: Indicating the result of the request (e.g., 200 for success, 404 for not found).
   - **Headers**: Metadata about the response (e.g., content type, content length).
   - **Body**: The actual content of the web page, which can include HTML, CSS, JavaScript, images, and more.

8. **HTML Parsing**: The browser's rendering engine parses the received HTML. It constructs the Document Object Model (DOM) tree, which represents the structure of the web page.

9. **Rendering**: The rendering engine processes the CSS to determine the layout and style of the web page. It then paints the page onto the browser window.

10. **JavaScript Execution**:
    - If the HTML document includes JavaScript code (in `<script>` tags), the browser's JavaScript engine parses and executes the code.
    - JavaScript can make additional requests to the server (e.g., for data via AJAX) or interact with the DOM to add interactivity to the page.

11. **Rendering Updates**: As the DOM or CSSOM (CSS Object Model) is modified by JavaScript, the rendering engine may update the displayed content. This process can trigger reflows and repaints.

12. **User Interaction**: The user can interact with the web page by clicking links, filling out forms, or triggering events, which may lead to further requests, updates, or navigations.

13. **Caching**: The browser caches various resources (HTML, CSS, images, etc.) to speed up future visits to the same website. Cached resources are retrieved from the local cache instead of re-downloading from the server.

14. **Security**: The browser also performs security checks, such as ensuring that HTTPS connections are secure, preventing cross-site scripting (XSS) attacks, and handling cookies and session management.

This sequence of steps illustrates the complex process that occurs under the hood when you enter a valid URL in a web browser. The browser's rendering and JavaScript engines play crucial roles in rendering and executing web pages, making the web experience interactive and dynamic.